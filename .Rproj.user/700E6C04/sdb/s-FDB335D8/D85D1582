{
    "collab_server" : "",
    "contents" : "#Crude translation of\n#http://www.mathworks.com/matlabcentral/fileexchange/22545-most-probable-number--mpn-\n#itself a translation of\n# http://www.i2workout.com/mcuriale/mpn/index.html\n\n\n MPNindex <-function( Dilution,Replicates,Positive)\n {  [MPN.R MPN.H MPN.L]\n#  MPNindex <-function( Dilution,Replicates,Positive)\n {  [MPN.R MPN.H MPN.L]\n# Temporary Bug Fix  - when division by 0 multiplying Dilution by 10\n# 11.8.08\n# -------------------------------------------------------------------------\n# Purpose: getting the number of bactria in the original sample\n# description: mpn algorithm\n# Arguments: Dilution - an array contains the amount of original sample\n#       Replicates - an array of the number of wells to concider (usually 8)\n#       Positive - an array of the number of wells containing bact.\n# Returns: MPN.R - how many bact were in the original sample\n#       MPN.H, MPN.L - the error of the calculation - upper and lower limit\n# -------------------------------------------------------------------------\n#translated from Excel version MPN Calculator by by Mike Curiale\n#(http://www.i2workout.com/mcuriale/mpn/index.html mcuriale@gmail.com)\n#translated by Ofer Fridman (oferfrid@hotmail.com)\nDilutionFactor<-1\nnumdil <- length(Dilution)\n\nprecision <- 0.0000000001\na <- precision\n\n\n#loop to fix BUG\nConstDilution <- Dilution\n\nflag <- 1\nwhile flag==1\n    Lower <- 0\nUpper <- 1000000000\nMPN <- Upper\n#  'start values to    } # routine\nvdp <- 2\nvdn <- 1\n    Dilution <- ConstDilution.*DilutionFactor\n    flag<-0\n    while vdn < vdp\n        Upper <- Upper / 10\n        MPN <- Upper\n        vdp <- 0\n        vdn <- 0\n        for (  j in 1 : numdil\n ) {\n            if exp(-Dilution( j) * MPN)==1\n                DilutionFactor<-DilutionFactor*10\n                flag<-1\n                break\n               } #\n            vdn <- vdn + Dilution( j) * Replicates( j)\n            vdp <- vdp + (Dilution( j) * Positive( j) / (1 - exp(-Dilution( j) * MPN)))\n           } #\n        if flag==1\n            break\n           } #\n       } #\n   } #\n\n\n\nwhile vdn < vdp\n    Upper <- Upper / 10\n    MPN <- Upper\n    vdp <- 0\n    vdn <- 0\n    for (  j in 1 : numdil\n ) {\n        vdn <- vdn + Dilution( j) * Replicates( j)\n        vdp <- vdp + (Dilution( j) * Positive( j) / (1 - exp(-Dilution( j) * MPN)))\n       } #\n   } #\n\n\n\nUpper <- Upper * 10\nwhile ((vdn - vdp) > a) || ((vdn - vdp) < -a)\n    Midpoint <- (Lower + Upper) / 2\n    MPN <- Midpoint\n    #'reset vdn and vdp\n    vdn <- 0\n    vdp <- 0\n    for (  j  in  1 : numdil\n ) {\n        vdn <- vdn + Dilution( j) * Replicates( j)\n        vdp <- vdp + (Dilution( j) * Positive( j) / (1 - exp(-Dilution( j) * MPN)))\n        if MPN < 0.00001\n            fprintf('Overflow calculation. Could not compute result. Reduce dilutions or number of tubes.')\n           } #\n       } #\n\n    if vdp>vdn\n        Lower <- Midpoint\n       } #\n\n    if vdp < vdn\n        Upper <- Midpoint\n       } #\n   } #\n\n#     'excel 97 does not have round function\nMPN.R <- sigfig(MPN, 2)\ng2n <- 0\n#     Select Case MPNresult\n#     Case 2  'return  lower limit of 95# ci\nfor (  j  in  1 : numdil\n ) {\n    m <- (Dilution( j) ^ 2 * Replicates( j))\n    n <- (exp(Dilution( j) * MPN) - 1)\n    g2n <- g2n + m / n\n   } #\n\ng2n <- (1 / (MPN ^ 2 * g2n)) ^ 0.5 / log(10)\ng2n <- 10 ^ ((log(MPN) / log(10) - 1.96 * g2n))\nMPN.L <- sigfig(g2n, 2)\n\n#     Case 3   'return upper limit of 95# ci\ng2n <- 0\nfor (  j in 1 : numdil\n ) {\n    m <- (Dilution( j) ^ 2 * Replicates( j))\n    n <- (exp(Dilution( j) * MPN) - 1)\n    g2n <- g2n + m / n\n   } #\n\ng2n <- (1 / (MPN ^ 2 * g2n)) ^ 0.5 / log(10)\ng2n <- 10 ^ ((log(MPN) / log(10) + 1.96 * g2n))\nMPN.H <- sigfig(g2n, 2)\n\n#BUG FIX\nMPN.R<-MPN.R*DilutionFactor\nMPN.L<-MPN.L*DilutionFactor\nMPN.H <- MPN.H*DilutionFactor\n\n\n   } #\n\n  sigfig <-function( GenNum, SigNum )\n {  sigfig\nb<-  floor(log10(GenNum)) -(SigNum -1)\nc<-GenNum/(10^b)\nfc<-floor(c)\nd<- c - fc\nif d ><- 0.5,\n    fc<-fc+1\n   } #\n#     'return value\nsigfig <- fc*10^b\n   } #\n",
    "created" : 1467712945240.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "118426425",
    "id" : "D85D1582",
    "lastKnownWriteTime" : 1467712115,
    "last_content_update" : 1467712115,
    "path" : "~/Documents/R/MPN/temp_files/MPNindex.R",
    "project_path" : "temp_files/MPNindex.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}